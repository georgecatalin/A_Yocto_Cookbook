georgeca@georgeca-VirtualBox:~/yocto_tutorial/sources/tmp/work/core2-64-poky-linux/helloworld/0.1-r0/temp$ cd ~/yocto_tutorial/poky/
georgeca@georgeca-VirtualBox:~/yocto_tutorial/poky$ ls -lh
total 96K
drwxrwxr-x  6 georgeca georgeca 4,0K mai 24 08:38 bitbake
drwxrwxr-x  4 georgeca georgeca 4,0K mai 24 08:38 contrib
drwxrwxr-x 21 georgeca georgeca 4,0K mai 24 08:38 documentation
-rw-rw-r--  1 georgeca georgeca  834 mai 24 08:38 LICENSE
-rw-rw-r--  1 georgeca georgeca  16K mai 24 08:38 LICENSE.GPL-2.0-only
-rw-rw-r--  1 georgeca georgeca 1,3K mai 24 08:38 LICENSE.MIT
-rw-rw-r--  1 georgeca georgeca 2,2K mai 24 08:38 MAINTAINERS.md
-rw-rw-r--  1 georgeca georgeca 1,2K mai 24 08:38 Makefile
-rw-rw-r--  1 georgeca georgeca  244 mai 24 08:38 MEMORIAM
drwxrwxr-x 20 georgeca georgeca 4,0K mai 24 08:38 meta
drwxrwxr-x  4 georgeca georgeca 4,0K mai 26 22:22 meta-my-builder
drwxrwxr-x 14 georgeca georgeca 4,0K mai 26 17:54 meta-openembedded
drwxrwxr-x  5 georgeca georgeca 4,0K mai 24 08:38 meta-poky
drwxrwxr-x  9 georgeca georgeca 4,0K mai 24 08:38 meta-selftest
drwxrwxr-x  8 georgeca georgeca 4,0K mai 24 08:38 meta-skeleton
drwxrwxr-x  8 georgeca georgeca 4,0K mai 24 08:38 meta-yocto-bsp
-rwxrwxr-x  1 georgeca georgeca 1,3K mai 24 08:38 oe-init-build-env
lrwxrwxrwx  1 georgeca georgeca   33 mai 24 08:38 README.hardware.md -> meta-yocto-bsp/README.hardware.md
lrwxrwxrwx  1 georgeca georgeca   14 mai 24 08:38 README.md -> README.poky.md
-rw-rw-r--  1 georgeca georgeca  791 mai 24 08:38 README.OE-Core.md
lrwxrwxrwx  1 georgeca georgeca   24 mai 24 08:38 README.poky.md -> meta-poky/README.poky.md
-rw-rw-r--  1 georgeca georgeca  529 mai 24 08:38 README.qemu.md
drwxrwxr-x 10 georgeca georgeca 4,0K mai 24 08:38 scripts
-rw-rw-r--  1 georgeca georgeca 1,2K mai 24 08:38 SECURITY.md
georgeca@georgeca-VirtualBox:~/yocto_tutorial/poky$ cd meta
georgeca@georgeca-VirtualBox:~/yocto_tutorial/poky/meta$ ls -lh
total 88K
drwxrwxr-x  2 georgeca georgeca  12K mai 24 08:38 classes
drwxrwxr-x  6 georgeca georgeca 4,0K mai 24 08:38 conf
-rw-rw-r-- 10 georgeca georgeca 1,1K mai 24 08:38 COPYING.MIT
drwxrwxr-x  4 georgeca georgeca 4,0K mai 24 08:38 files
drwxrwxr-x  6 georgeca georgeca 4,0K mai 24 09:01 lib
drwxrwxr-x 21 georgeca georgeca 4,0K mai 24 08:38 recipes-bsp
drwxrwxr-x 26 georgeca georgeca 4,0K mai 24 08:38 recipes-connectivity
drwxrwxr-x 44 georgeca georgeca 4,0K mai 24 08:38 recipes-core
drwxrwxr-x 97 georgeca georgeca 4,0K mai 24 08:38 recipes-devtools
drwxrwxr-x  3 georgeca georgeca 4,0K mai 24 08:38 recipes-example
drwxrwxr-x 88 georgeca georgeca 4,0K mai 24 08:38 recipes-extended
drwxrwxr-x 19 georgeca georgeca 4,0K mai 24 08:38 recipes-gnome
drwxrwxr-x 49 georgeca georgeca 4,0K mai 24 08:38 recipes-graphics
drwxrwxr-x 18 georgeca georgeca 4,0K mai 24 08:38 recipes-kernel
drwxrwxr-x 23 georgeca georgeca 4,0K mai 24 08:38 recipes-multimedia
drwxrwxr-x  4 georgeca georgeca 4,0K mai 24 08:38 recipes-rt
drwxrwxr-x 21 georgeca georgeca 4,0K mai 24 08:38 recipes-sato
drwxrwxr-x 86 georgeca georgeca 4,0K mai 24 08:38 recipes-support
-rw-rw-r--  1 georgeca georgeca 1,2K mai 24 08:38 recipes.txt
drwxrwxr-x  2 georgeca georgeca 4,0K mai 24 08:38 site
georgeca@georgeca-VirtualBox:~/yocto_tutorial/poky/meta$ m5sum COPYING.MIT
Command 'm5sum' not found, did you mean:
  command 'mdsum' from deb ucommon-utils (7.0.0-20ubuntu2)
  command 'md5sum' from deb coreutils (8.32-4.1ubuntu1.2)
Try: sudo apt install <deb name>
georgeca@georgeca-VirtualBox:~/yocto_tutorial/poky/meta$ md5sum COPYING.MIT
3da9cfbcb788c80a0384361b4de20420  COPYING.MIT
georgeca@georgeca-VirtualBox:~/yocto_tutorial/poky/meta$ cd ../../my_builds/
georgeca@georgeca-VirtualBox:~/yocto_tutorial/my_builds$ source ../poky/oe-init-build-env .

### Shell environment set up for builds. ###

You can now run 'bitbake <target>'

Common targets are:
    core-image-minimal
    core-image-full-cmdline
    core-image-sato
    core-image-weston
    meta-toolchain
    meta-ide-support

You can also run generated qemu images with a command like 'runqemu qemux86'

Other commonly useful commands are:
 - 'devtool' and 'recipetool' handle common recipe tasks
 - 'bitbake-layers' handles common layer tasks
 - 'oe-pkgdata-util' handles common target package tasks
georgeca@georgeca-VirtualBox:~/yocto_tutorial/my_builds$ bitbake -c list-tasks helloworld
Loading cache: 100% |####################################################################################| Time: 0:00:00
Loaded 2786 entries from dependency cache.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = "2.0.0"
BUILD_SYS            = "x86_64-linux"
NATIVELSBSTRING      = "universal"
TARGET_SYS           = "x86_64-poky-linux"
MACHINE              = "qemux86-64"
DISTRO               = "poky"
DISTRO_VERSION       = "4.0.27"
TUNE_FEATURES        = "m64 core2"
TARGET_FPU           = ""
meta
meta-poky
meta-yocto-bsp       = "kirkstone:ab9a994a8cd8e06b519a693db444030999d273b7"
meta-oe              = "kirkstone:e42549cef364ae09b3b7c8b64bbeab32e50f1bb0"
meta-my-builder      = "kirkstone:ab9a994a8cd8e06b519a693db444030999d273b7"
meta-assignment-vars = "<unknown>:<unknown>"

ERROR: Task do_list-tasks does not exist for target helloworld (/home/georgeca/yocto_tutorial/poky/meta-my-builder/recipes-example/helloworld/helloworld_0.1.bb:do_list-tasks). Close matches:
  do_listtasks
ERROR: Command execution failed: 1

Summary: There were 2 ERROR messages, returning a non-zero exit code.
georgeca@georgeca-VirtualBox:~/yocto_tutorial/my_builds$ bitbake help
Loading cache: 100% |####################################################################################| Time: 0:00:00
Loaded 2786 entries from dependency cache.
ERROR: Nothing PROVIDES 'help'

Summary: There was 1 ERROR message, returning a non-zero exit code.
georgeca@georgeca-VirtualBox:~/yocto_tutorial/my_builds$ bitbake -c listtasks
Nothing to do.  Use 'bitbake world' to build everything, or run 'bitbake --help' for usage information.
georgeca@georgeca-VirtualBox:~/yocto_tutorial/my_builds$ bitbake -c listtasks helloworld
Loading cache: 100% |####################################################################################| Time: 0:00:00
Loaded 2786 entries from dependency cache.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = "2.0.0"
BUILD_SYS            = "x86_64-linux"
NATIVELSBSTRING      = "universal"
TARGET_SYS           = "x86_64-poky-linux"
MACHINE              = "qemux86-64"
DISTRO               = "poky"
DISTRO_VERSION       = "4.0.27"
TUNE_FEATURES        = "m64 core2"
TARGET_FPU           = ""
meta
meta-poky
meta-yocto-bsp       = "kirkstone:ab9a994a8cd8e06b519a693db444030999d273b7"
meta-oe              = "kirkstone:e42549cef364ae09b3b7c8b64bbeab32e50f1bb0"
meta-my-builder      = "kirkstone:ab9a994a8cd8e06b519a693db444030999d273b7"
meta-assignment-vars = "<unknown>:<unknown>"

Initialising tasks: 100% |###############################################################################| Time: 0:00:01
Sstate summary: Wanted 0 Local 0 Mirrors 0 Missed 0 Current 0 (0% match, 0% complete)
NOTE: No setscene tasks
NOTE: Executing Tasks
do_build                              Default task for a recipe - depends on all other normal tasks required to 'build' a recipe
do_build_without_rm_work
do_checkuri                           Validates the SRC_URI value
do_clean                              Removes all output files for a target
do_cleanall                           Removes all output files, shared state cache, and downloaded source files for a target
do_cleansstate                        Removes all output files and shared state cache for a target
do_compile                            Compiles the source in the compilation directory
do_configure                          Configures the source by enabling and disabling any build-time and configuration options for the software being built
do_deploy_source_date_epoch
do_deploy_source_date_epoch_setscene   (setscene version)
do_devshell                           Starts a shell with the environment set up for development/debugging
do_fetch                              Fetches the source code
do_install                            Copies files from the compilation directory to a holding area
do_listtasks                          Lists all defined tasks for a target
do_package                            Analyzes the content of the holding area and splits it into subsets based on available packages and files
do_package_qa                         Runs QA checks on packaged files
do_package_qa_setscene                Runs QA checks on packaged files (setscene version)
do_package_setscene                   Analyzes the content of the holding area and splits it into subsets based on available packages and files (setscene version)
do_package_write_rpm                  Creates the actual RPM packages and places them in the Package Feed area
do_package_write_rpm_setscene         Creates the actual RPM packages and places them in the Package Feed area (setscene version)
do_packagedata                        Creates package metadata used by the build system to generate the final packages
do_packagedata_setscene               Creates package metadata used by the build system to generate the final packages (setscene version)
do_patch                              Locates patch files and applies them to the source code
do_populate_lic                       Writes license information for the recipe that is collected later when the image is constructed
do_populate_lic_setscene              Writes license information for the recipe that is collected later when the image is constructed (setscene version)
do_populate_sysroot                   Copies a subset of files installed by do_install into the sysroot in order to make them available to other recipes
do_populate_sysroot_setscene          Copies a subset of files installed by do_install into the sysroot in order to make them available to other recipes (setscene version)
do_prepare_recipe_sysroot
do_pydevshell                         Starts an interactive Python shell for development/debugging
do_rm_work                            Removes work files after the build system has finished with them
do_rm_work_all                        Top-level task for removing work files after the build system has finished with them
do_unpack                             Unpacks the source code into a working directory
NOTE: Tasks Summary: Attempted 1 tasks of which 0 didn't need to be rerun and all succeeded.
georgeca@georgeca-VirtualBox:~/yocto_tutorial/my_builds$ bitbake --help
Usage: bitbake [options] [recipename/target recipe:do_task ...]

    Executes the specified task (default is 'build') for a given set of target recipes (.bb files).
    It is assumed there is a conf/bblayers.conf available in cwd or in BBPATH which
    will provide the layer, BBFILES and other configuration information.

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -b BUILDFILE, --buildfile=BUILDFILE
                        Execute tasks from a specific .bb recipe directly.
                        WARNING: Does not handle any dependencies from other
                        recipes.
  -k, --continue        Continue as much as possible after an error. While the
                        target that failed and anything depending on it cannot
                        be built, as much as possible will be built before
                        stopping.
  -f, --force           Force the specified targets/task to run (invalidating
                        any existing stamp file).
  -c CMD, --cmd=CMD     Specify the task to execute. The exact options
                        available depend on the metadata. Some examples might
                        be 'compile' or 'populate_sysroot' or 'listtasks' may
                        give a list of the tasks available.
  -C INVALIDATE_STAMP, --clear-stamp=INVALIDATE_STAMP
                        Invalidate the stamp for the specified task such as
                        'compile' and then run the default task for the
                        specified target(s).
  -r PREFILE, --read=PREFILE
                        Read the specified file before bitbake.conf.
  -R POSTFILE, --postread=POSTFILE
                        Read the specified file after bitbake.conf.
  -v, --verbose         Enable tracing of shell tasks (with 'set -x'). Also
                        print bb.note(...) messages to stdout (in addition to
                        writing them to ${T}/log.do_<task>).
  -D, --debug           Increase the debug level. You can specify this more
                        than once. -D sets the debug level to 1, where only
                        bb.debug(1, ...) messages are printed to stdout; -DD
                        sets the debug level to 2, where both bb.debug(1, ...)
                        and bb.debug(2, ...) messages are printed; etc.
                        Without -D, no debug messages are printed. Note that
                        -D only affects output to stdout. All debug messages
                        are written to ${T}/log.do_taskname, regardless of the
                        debug level.
  -q, --quiet           Output less log message data to the terminal. You can
                        specify this more than once.
  -n, --dry-run         Don't execute, just go through the motions.
  -S SIGNATURE_HANDLER, --dump-signatures=SIGNATURE_HANDLER
                        Dump out the signature construction information, with
                        no task execution. The SIGNATURE_HANDLER parameter is
                        passed to the handler. Two common values are none and
                        printdiff but the handler may define more/less. none
                        means only dump the signature, printdiff means compare
                        the dumped signature with the cached one.
  -p, --parse-only      Quit after parsing the BB recipes.
  -s, --show-versions   Show current and preferred versions of all recipes.
  -e, --environment     Show the global or per-recipe environment complete
                        with information about where variables were
                        set/changed.
  -g, --graphviz        Save dependency tree information for the specified
                        targets in the dot syntax.
  -I EXTRA_ASSUME_PROVIDED, --ignore-deps=EXTRA_ASSUME_PROVIDED
                        Assume these dependencies don't exist and are already
                        provided (equivalent to ASSUME_PROVIDED). Useful to
                        make dependency graphs more appealing
  -l DEBUG_DOMAINS, --log-domains=DEBUG_DOMAINS
                        Show debug logging for the specified logging domains
  -P, --profile         Profile the command and save reports.
  -u UI, --ui=UI        The user interface to use (knotty, ncurses, taskexp or
                        teamcity - default knotty).
  --token=XMLRPCTOKEN   Specify the connection token to be used when
                        connecting to a remote server.
  --revisions-changed   Set the exit code depending on whether upstream
                        floating revisions have changed or not.
  --server-only         Run bitbake without a UI, only starting a server
                        (cooker) process.
  -B BIND, --bind=BIND  The name/address for the bitbake xmlrpc server to bind
                        to.
  -T SERVER_TIMEOUT, --idle-timeout=SERVER_TIMEOUT
                        Set timeout to unload bitbake server due to
                        inactivity, set to -1 means no unload, default:
                        Environment variable BB_SERVER_TIMEOUT.
  --no-setscene         Do not run any setscene tasks. sstate will be ignored
                        and everything needed, built.
  --skip-setscene       Skip setscene tasks if they would be executed. Tasks
                        previously restored from sstate will be kept, unlike
                        --no-setscene
  --setscene-only       Only run setscene tasks, don't run any real tasks.
  --remote-server=REMOTE_SERVER
                        Connect to the specified server.
  -m, --kill-server     Terminate any running bitbake server.
  --observe-only        Connect to a server as an observing-only client.
  --status-only         Check the status of the remote bitbake server.
  -w WRITEEVENTLOG, --write-log=WRITEEVENTLOG
                        Writes the event log of the build to a bitbake event
                        json file. Use '' (empty string) to assign the name
                        automatically.
  --runall=RUNALL       Run the specified task for any recipe in the taskgraph
                        of the specified target (even if it wouldn't otherwise
                        have run).
  --runonly=RUNONLY     Run only the specified task within the taskgraph of
                        the specified targets (and any task dependencies those
                        tasks may have).
